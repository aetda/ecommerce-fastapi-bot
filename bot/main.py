import os
import random

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import asyncio

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def main_menu():
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list"),
                InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="search")
            ],
            [
                InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="category"),
                InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä", callback_data="random")
            ],
            [
                InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ]
        ]
    )
    return kb


@dp.message(Command("start"))
async def start_cmd(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω.")
    await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–≤–∞—Ä—ã.")
    if msg.from_user.id in ADMIN_IDS:
        await msg.answer("–¢—ã –∞–¥–º–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã.")


@dp.message(Command("help"))
async def help_cmd(msg: types.Message):
    user_id = msg.from_user.id
    base_commands = (
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/search <—Å–ª–æ–≤–æ> - –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞\n"
        "/category <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/help - —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    )

    admin_commands = (
        "\n\n–ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´:\n"
        "/add_product <name>;<price>;<description>;<category> - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "   –ü—Ä–∏–º–µ—Ä: /add_product –ù–æ—É—Ç–±—É–∫;299000;–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫;–ù–æ—É—Ç–±—É–∫–∏\n"
        "/update_product <id>;<name>;<price>;<description>;<category> - –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "   –ü—Ä–∏–º–µ—Ä: /update_product 2;–ù–æ—É—Ç–±—É–∫ Pro;350000;–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫;–ù–æ—É—Ç–±—É–∫–∏\n"
        "/delete_product <id> - —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "   –ü—Ä–∏–º–µ—Ä: /delete_product 2"
    )

    text = base_commands
    if user_id in ADMIN_IDS:
        text += admin_commands

    await msg.answer(text)


@dp.message(Command("list"))
async def list_cmd(msg: types.Message):
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@dp.callback_query()
async def callbacks(cb: types.CallbackQuery):
    action = cb.data

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/products") as resp:
            data = await resp.json()

    if action == "list":
        if not data:
            await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return
        text = "\n".join([f"{p['id']}. {p['name']} ‚Äî {p['price']}‚Ç∏ - category: {p['category']}" for p in data])
        await cb.message.answer(text)

    elif action == "random":
        if not data:
            await cb.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return
        p = random.choice(data)
        text = f"{p['id']}. {p['name']} ‚Äî {p['price']}‚Ç∏\n{p.get('description', '')}"
        await cb.message.answer(text)

    elif action == "stats":
        if not data:
            await cb.message.answer("–¢–æ–≤–∞—Ä—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        total = len(data)
        avg_price = sum(p['price'] for p in data) / total
        await cb.message.answer(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}\n–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.2f}‚Ç∏")

    elif action in ("search", "category"):
        await cb.message.answer("–î–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é:\n"
                                "/search <—Å–ª–æ–≤–æ> –∏–ª–∏ /category <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


@dp.message(Command("search"))
async def search_cmd(msg: types.Message):
    try:
        query = msg.text.split(maxsplit=1)[1].lower()
    except IndexError:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /search <—Å–ª–æ–≤–æ>")
        return

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/products") as resp:
            data = await resp.json()

    results = [p for p in data if query in p['name'].lower() or query in p['description'].lower()]
    if not results:
        await msg.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    text = "\n".join([f"{p['id']}. {p['name']} ‚Äî {p['price']}‚Ç∏" for p in results])
    await msg.answer(text)


@dp.message(Command("category"))
async def category_cmd(msg: types.Message):
    try:
        category = msg.text.split(maxsplit=1)[1].lower()
    except IndexError:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /category <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/products") as resp:
            data = await resp.json()

    results = [p for p in data if p.get('category', '').lower() == category]
    if not results:
        await msg.answer("–¢–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç")
        return
    text = "\n".join([f"{p['id']}. {p['name']} ‚Äî {p['price']}‚Ç∏" for p in results])
    await msg.answer(text)


@dp.message(Command("add_product"))
async def add_product_cmd(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üòï")
        return

    try:
        # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: /add_product –ù–æ—É—Ç–±—É–∫;299000;–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫;–ù–æ—É—Ç–±—É–∫–∏
        _, content = msg.text.split(maxsplit=1)
        name, price, description, category = map(str.strip, content.split(";"))
        price = float(price)
    except Exception:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /add_product <name>;<price>;<description>;<category>")
        return

    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/products", json={
            "name": name,
            "price": price,
            "description": description,
            "category": category
        }) as resp:
            if resp.status == 201:
                await msg.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            else:
                await msg.answer(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {resp.status}")


@dp.message(Command("update_product"))
async def update_product_cmd(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üòï")
        return

    try:
        # –ü—Ä–∏–º–µ—Ä: /update_product 2;–ù–æ—É—Ç–±—É–∫ Pro;350000;–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫;–ù–æ—É—Ç–±—É–∫–∏
        _, content = msg.text.split(maxsplit=1)
        product_id_str, name, price, description, category = map(str.strip, content.split(";"))
        product_id = int(product_id_str)
        price = float(price)
    except Exception:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /update_product <id>;<name>;<price>;<description>;<category>")
        return

    async with aiohttp.ClientSession() as session:
        async with session.put(f"{API_URL}/product/{product_id}", json={
            "name": name,
            "price": price,
            "description": description,
            "category": category
        }) as resp:
            if resp.status == 200:
                await msg.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
            elif resp.status == 404:
                await msg.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await msg.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {resp.status}")


@dp.message(Command("delete_product"))
async def delete_product_cmd(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        await msg.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üòï")
        return

    try:
        product_id = int(msg.text.split()[1])
    except (IndexError, ValueError):
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /delete_product <id>")
        return

    async with aiohttp.ClientSession() as session:
        async with session.delete(f"{API_URL}/product/{product_id}") as resp:
            if resp.status == 200:
                await msg.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω ‚úÖ")
            elif resp.status == 404:
                await msg.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                await msg.answer(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {resp.status}")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
